**************************************************************************
** title:      Filetypes
** author:     Brian Frank
** created:    17 Jul 2020
** copyright:  Copyright (c) 2020, Project-Haystack
**************************************************************************

Overview [#overview]
*********************
Haystack defines several text formats for encoding the fixed set
of standard [data types]`Kinds`.  Every file type is mapped to a
`filetype` definition.

Zinc [#zinc]
************
Zinc is a recursive acronym for "Zinc Is Not CSV".  It is the original
Haystack format designed to encode CSV with strong typing.  Zinc provides
full fidelity to encode all Haystack kinds without loss of typing.  It
provides a compact and readable syntax at the expense of requiring a non-trivial
custom parser.  Zinc's scalar encodings are also the basis for Trio and JSON.
Zinc is the default format used for the `HttpApi` (although today JSON is
also equally supported and utilized).

See `Zinc` chapter for further discussion and grammar.

JSON [#json]
************
The JSON format specifies a standardized method for mapping the Haystack
data types to JSON without loss of information.  Since JSON lacks anything
but very basic types, we encode scalar types to a string using the syntax
"x:value" where an ASCII character code is mapped to each of the scalar
types.  For example the "d:" prefix in "d:2020-07-20" informs us that the
string represents a [date kind]`Kinds#date`.

NOTE: there is a effort underway via [WG 792]`https://project-haystack.org/forum/topic/792`
to define an alternate JSON encoding using objects instead of Zinc encoded
strings.  This new JSON encoding will eventually supplant the current
JSON encoding.

See `Json` chapter for further details.

Trio [#trio]
************
Trio is an acronym for Tag Record Input/Output.  Trio is derived from
[YAML]`https://en.wikipedia.org/wiki/YAML`.  It uses the Zinc encodings
for scalar types to provide full type fidelity.  Trio is targeted for use
cases when humans need to hand code Haystack data.  For example its the format
used for [defs]`Defs`.  Most examples in the documentation are formatted
in Trio.

Trio is a line oriented format.  Dicts are encoded with each tag on its own
line.  Dicts are separated by a line of "---".  There is also some syntax suguar
for multi-line strings and nested collection data values.

Trio is not ideal for representing grids because it does not support grid
meta nor column meta.  As such Trio is should not typically be used to encode
requests/responses in the `HttpApi`.

See `Trio` chapter for further details.

CSV [#csv]
**********
CSV stands for Comma Separated Values.  CSV files are easily imported and
exported from spreadsheets and relational databases.  CSV is the inspiration
for Zinc.  The main drawback with CSV is that there is essentially only one
collection type (table/grid) and one scalar type (strings).  As such CSV
does not provide full fidelity with Haystack kinds.  However as a widely
supported open format, we specify a standard mechanism to export Haystack
data to CSV.

See `Csv` chapter for further details.

RDF [#rdf]
**********
Project Haystack specifies a standard export to RDF triples via two different
formats: Turtle and JSON-LD.  Both defs and instance data have a standard export
mapping.

See `Rdf` chapter for details.




